--- /dev/null
+++ b/modules/nginx-udplog/LICENCE
@@ -0,0 +1,25 @@
+* Copyright (c) 2010, Valery Kholodkov
+* Copyright (c) 2011, Ryan Lane
+* All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are met:
+*     * Redistributions of source code must retain the above copyright
+*       notice, this list of conditions and the following disclaimer.
+*     * Redistributions in binary form must reproduce the above copyright
+*       notice, this list of conditions and the following disclaimer in the
+*       documentation and/or other materials provided with the distribution.
+*     * Neither the name of the Valery Kholodkov nor the
+*       names of its contributors may be used to endorse or promote products
+*       derived from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY VALERY KHOLODKOV ''AS IS'' AND ANY
+* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+* DISCLAIMED. IN NO EVENT SHALL VALERY KHOLODKOV BE LIABLE FOR ANY
+* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--- /dev/null
+++ b/modules/nginx-udplog/LICENCE.ru
@@ -0,0 +1,32 @@
+* Copyright (c) 2010, Валерий Холодков
+*
+* Разрешается повторное распространение и использование как в виде исходного
+* кода, так и в двоичной форме, с изменениями или без, при соблюдении
+* следующих условий:
+*
+*     * При повторном распространении исходного кода должно оставаться
+*       указанное выше уведомление об авторском праве, этот список условий и
+*       последующий отказ от гарантий.
+*     * При повторном распространении двоичного кода должна сохраняться
+*       указанная выше информация об авторском праве, этот список условий и
+*       последующий отказ от гарантий в документации и/или в других
+*       материалах, поставляемых при распространении.
+*     * Ни имя Валерия Холодкова, ни имена вкладчиков не могут быть
+*       использованы в качестве поддержки или продвижения продуктов,
+*       основанных на этом ПО без предварительного письменного разрешения. 
+*
+* ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ
+* СТОРОНАМИ "КАК ОНА ЕСТЬ" БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО
+* ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ
+* ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В
+* КОЕМ СЛУЧАЕ, ЕСЛИ НЕ ТРЕБУЕТСЯ СООТВЕТСТВУЮЩИМ ЗАКОНОМ, ИЛИ НЕ УСТАНОВЛЕНО
+* В УСТНОЙ ФОРМЕ, НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО  ДРУГОЕ ЛИЦО,
+* КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО
+* СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ,
+* СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ
+* НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ
+* ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ
+* ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ
+* СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ
+* ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
+
--- /dev/null
+++ b/modules/nginx-udplog/README
@@ -0,0 +1,37 @@
+
+Documentation for this module could be found under following URLs:
+
+  * English:
+
+    http://www.grid.net.ru/nginx/udplog.en.html
+
+  * Russian:
+
+    http://www.grid.net.ru/nginx/udplog.ru.html
+
+---------------------------------------------------------------------
+
+Test client usage:
+
+    usage: python test_client.py [-h] [-w W] [-l L] url
+
+    positional arguments:
+      url         URL of the nginx web server to send requests to
+
+    optional arguments:
+      -h, --help  show this help message and exit
+      -n N        Number of random user agent strings to send (default=10)
+      -w W        Seconds to wait between requests (default=0.25)
+      -l L        Length of garbage user agent strings (default=50)
+      
+
+    Note that this is mainly for testing that the User-Agent strings are
+    being properly encoded so before running this you'll need to configure
+    nginx to make use of the "access_updlog" command and add the new 
+    variable $udplog_escaped-user_agent in your "log_format".
+
+    Once configured, the access logs will then be written to the defined
+    host via UDP. To see these you can listen on the port with socat and
+    write the data to stdout:
+
+        socat UDP-LISTEN:<port> STDOUT
--- /dev/null
+++ b/modules/nginx-udplog/config
@@ -0,0 +1,3 @@
+ngx_addon_name=ngx_http_udplog_module
+HTTP_MODULES="$HTTP_MODULES ngx_http_udplog_module"
+NGX_ADDON_SRCS="$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_udplog_module.c"
--- /dev/null
+++ b/modules/nginx-udplog/ngx_http_udplog_module.c
@@ -0,0 +1,705 @@
+
+/*
+ * Copyright (C) 2010 Valery Kholodkov
+ *
+ * NOTE: Some small fragments have been copied from original nginx log module due to exports problem.
+ */
+
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+#include <ngx_http.h>
+#include <nginx.h>
+
+static ngx_atomic_t   udplog_sequence_number = 1;
+ngx_atomic_t         *ngx_udplog_sequence_number = &udplog_sequence_number;
+
+#if defined nginx_version && nginx_version >= 8021
+typedef ngx_addr_t ngx_udplog_addr_t;
+#else
+typedef ngx_peer_addr_t ngx_udplog_addr_t;
+#endif
+
+typedef struct ngx_http_log_op_s  ngx_http_log_op_t;
+
+typedef u_char *(*ngx_http_log_op_run_pt) (ngx_http_request_t *r, u_char *buf,
+    ngx_http_log_op_t *op);
+
+typedef size_t (*ngx_http_log_op_getlen_pt) (ngx_http_request_t *r,
+    uintptr_t data);
+
+
+struct ngx_http_log_op_s {
+    size_t                      len;
+    ngx_http_log_op_getlen_pt   getlen;
+    ngx_http_log_op_run_pt      run;
+    uintptr_t                   data;
+};
+
+typedef struct {
+    ngx_str_t                   name;
+#if defined nginx_version && nginx_version >= 7018
+    ngx_array_t                *flushes;
+#endif
+    ngx_array_t                *ops;        /* array of ngx_http_log_op_t */
+} ngx_http_log_fmt_t;
+
+typedef struct {
+    ngx_array_t                 formats;    /* array of ngx_http_log_fmt_t */
+    ngx_uint_t                  combined_used; /* unsigned  combined_used:1 */
+} ngx_http_log_main_conf_t;
+
+typedef struct {
+    ngx_udplog_addr_t           peer_addr;
+    ngx_udp_connection_t        *udp_connection;
+} ngx_udp_endpoint_t;
+
+typedef struct {
+    ngx_udp_endpoint_t       *endpoint;
+    ngx_http_log_fmt_t       *format;
+    ngx_uint_t                facility;
+    ngx_uint_t                severity;
+} ngx_http_udplog_t;
+
+typedef struct {
+    ngx_array_t                *endpoints;
+} ngx_http_udplog_main_conf_t;
+
+typedef struct {
+    ngx_array_t                *logs;       /* array of ngx_http_udplog_t */
+    unsigned                    off;
+} ngx_http_udplog_conf_t;
+
+ngx_int_t ngx_udp_connect(ngx_udp_connection_t *uc);
+
+static void ngx_udplogger_cleanup(void *data);
+static ngx_int_t ngx_http_udplogger_send(ngx_udp_endpoint_t *l, u_char *buf, size_t len);
+
+static void *ngx_http_udplog_create_main_conf(ngx_conf_t *cf);
+static void *ngx_http_udplog_create_loc_conf(ngx_conf_t *cf);
+static char *ngx_http_udplog_merge_loc_conf(ngx_conf_t *cf, void *parent,
+    void *child);
+
+static char *ngx_http_udplog_set_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+
+static ngx_int_t ngx_http_udplog_module_init(ngx_cycle_t *cycle);
+static ngx_int_t ngx_http_udplog_init(ngx_conf_t *cf);
+static ngx_int_t ngx_http_udplog_add_variables(ngx_conf_t *cf);
+static ngx_int_t ngx_http_udplog_time_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_udplog_sequence_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_udplog_escaped_user_agent_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_udplog_escaped_content_type_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+
+static ngx_http_variable_t  ngx_http_udplog_variables[] = {
+	{ ngx_string("udplog_time"), NULL, ngx_http_udplog_time_variable, 0,
+          NGX_HTTP_VAR_NOCACHEABLE|NGX_HTTP_VAR_NOHASH, 0 },
+	{ ngx_string("udplog_sequence"), NULL, ngx_http_udplog_sequence_variable, 0,
+          NGX_HTTP_VAR_NOCACHEABLE|NGX_HTTP_VAR_NOHASH, 0 },
+	{ ngx_string("udplog_escaped_user_agent"), NULL, ngx_http_udplog_escaped_user_agent_variable, 0,
+          NGX_HTTP_VAR_NOCACHEABLE|NGX_HTTP_VAR_NOHASH, 0 },
+	{ ngx_string("udplog_escaped_content_type"), NULL, ngx_http_udplog_escaped_content_type_variable, 0,
+          NGX_HTTP_VAR_NOCACHEABLE|NGX_HTTP_VAR_NOHASH, 0 },
+
+	{ ngx_null_string, NULL, NULL, 0, 0, 0 }
+};
+
+static ngx_command_t  ngx_http_udplog_commands[] = {
+
+    { ngx_string("access_udplog"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF
+                        |NGX_HTTP_LMT_CONF|NGX_CONF_TAKE123,
+      ngx_http_udplog_set_log,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
+      ngx_null_command
+};
+
+
+static ngx_http_module_t  ngx_http_udplog_module_ctx = {
+    ngx_http_udplog_add_variables,          /* preconfiguration */
+    ngx_http_udplog_init,                  /* postconfiguration */
+
+    ngx_http_udplog_create_main_conf,      /* create main configuration */
+    NULL,                                  /* init main configuration */
+
+    NULL,                                  /* create server configuration */
+    NULL,                                  /* merge server configuration */
+
+    ngx_http_udplog_create_loc_conf,       /* create location configration */
+    ngx_http_udplog_merge_loc_conf         /* merge location configration */
+};
+
+extern ngx_module_t  ngx_http_log_module;
+
+ngx_module_t  ngx_http_udplog_module = {
+    NGX_MODULE_V1,
+    &ngx_http_udplog_module_ctx,           /* module context */
+    ngx_http_udplog_commands,              /* module directives */
+    NGX_HTTP_MODULE,                       /* module type */
+    NULL,                                  /* init master */
+    ngx_http_udplog_module_init,           /* init module */
+    NULL,                                  /* init process */
+    NULL,                                  /* init thread */
+    NULL,                                  /* exit thread */
+    NULL,                                  /* exit process */
+    NULL,                                  /* exit master */
+    NGX_MODULE_V1_PADDING
+};
+
+static ngx_int_t
+ngx_http_udplog_time_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    size_t                    len;
+    ngx_time_t                *time;
+    ngx_tm_t                  tm;
+
+    time = ngx_timeofday();
+    ngx_gmtime(time->sec, &tm);
+
+    len = sizeof("2011-06-28T00:00:00.000");
+#if defined nginx_version && nginx_version >= 7003
+    v->data = ngx_pnalloc(r->pool, len);
+#else
+    v->data = ngx_palloc(r->pool, len);
+#endif
+    if (v->data == NULL) {
+        return NGX_ERROR;
+    }
+
+    v->len = ngx_sprintf(v->data,
+                      "%4d-%02d-%02dT%02d:%02d:%02d.%03M",
+                       tm.ngx_tm_year,
+                       tm.ngx_tm_mon,
+                       tm.ngx_tm_mday,
+                       tm.ngx_tm_hour,
+                       tm.ngx_tm_min,
+                       tm.ngx_tm_sec,
+                       time->msec) - v->data;
+
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+}
+
+/* FIXME: this has always been and still is BROKEN. 
+ *
+ * the variable functions are being called everytime a variable's value is
+ * fetched. That means, is the variable is twice in the logline the sequence
+ * number will be incremented by two; this also means that it will be
+ * incremented once per configured udplog target.
+ *
+ * Suffice to say that since this has never been coded properly or tested,
+ * other bugs may lurk here. Proceed with caution.
+ */
+static ngx_int_t
+ngx_http_udplog_sequence_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    ngx_atomic_uint_t sequence_number;
+    sequence_number = ngx_atomic_fetch_add(ngx_udplog_sequence_number, 1);
+
+#if defined nginx_version && nginx_version >= 7003
+    v->data = ngx_pnalloc(r->pool, sizeof(sequence_number));
+#else
+    v->data = ngx_palloc(r->pool, sizeof(sequence_number));
+#endif
+    if (v->data == NULL) {
+        return NGX_ERROR;
+    }
+    v->len = ngx_sprintf(v->data, "%l", sequence_number) - v->data;
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+}
+
+static ngx_int_t
+ngx_http_udplog_escaped_user_agent_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    u_char                    *ua;
+    uintptr_t                 escape;
+    size_t                    l;  
+
+    // Check that the user agent string was processed. NULL seems
+    // to occur when the user agent string is very large (~8K)
+    if(r->headers_in.user_agent == NULL) {
+        return NGX_ERROR;
+    }
+
+    ua = r->headers_in.user_agent->value.data;
+    l = r->headers_in.user_agent->value.len;
+    escape = 2 * ngx_escape_uri(NULL, ua, l, NGX_ESCAPE_URI);
+
+    v->data = ngx_pnalloc(r->pool, l + escape);
+    if (v->data == NULL) {
+        return NGX_ERROR;
+    }   
+
+    ngx_escape_uri(v->data, ua, l, NGX_ESCAPE_URI);
+
+    v->len = l + escape;
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+    
+}
+
+static ngx_int_t
+ngx_http_udplog_escaped_content_type_variable(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    u_char                    *ct;
+    uintptr_t                 escape;
+    size_t                    l;  
+
+    // Check that the content type string was processed. 
+    if(r->headers_in.content_type == NULL) {
+        return NGX_ERROR;
+    }
+
+    ct = r->headers_in.content_type->value.data;
+    l = r->headers_in.content_type->value.len;
+    escape = 2 * ngx_escape_uri(NULL, ct, l, NGX_ESCAPE_URI);
+
+    v->data = ngx_pnalloc(r->pool, l + escape);
+    if (v->data == NULL) {
+        return NGX_ERROR;
+    }   
+
+    ngx_escape_uri(v->data, ct, l, NGX_ESCAPE_URI);
+
+    v->len = l + escape;
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    return NGX_OK;
+}
+
+static ngx_int_t
+ngx_http_udplog_add_variables(ngx_conf_t *cf)
+{
+    ngx_http_variable_t  *var, *v;
+
+    for (v = ngx_http_udplog_variables; v->name.len; v++) {
+        var = ngx_http_add_variable(cf, &v->name, v->flags);
+        if (var == NULL) {
+            return NGX_ERROR;
+        }
+
+        var->get_handler = v->get_handler;
+        var->data = v->data;
+    }
+
+    return NGX_OK;
+}
+
+ngx_int_t
+ngx_http_udplog_handler(ngx_http_request_t *r)
+{
+    u_char                   *line, *p;
+    size_t                    len;
+    ngx_uint_t                i, l;
+    ngx_http_udplog_t        *log;
+    ngx_http_log_op_t        *op;
+    ngx_http_udplog_conf_t   *ulcf;
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http udplog handler");
+
+    ulcf = ngx_http_get_module_loc_conf(r, ngx_http_udplog_module);
+
+    if(ulcf->off) {
+        return NGX_OK;
+    }
+
+    log = ulcf->logs->elts;
+    for (l = 0; l < ulcf->logs->nelts; l++) {
+
+#if defined nginx_version && nginx_version >= 7018
+        ngx_http_script_flush_no_cacheable_variables(r, log[l].format->flushes);
+#endif
+
+        len = 0;
+        op = log[l].format->ops->elts;
+        for (i = 0; i < log[l].format->ops->nelts; i++) {
+            if (op[i].len == 0) {
+                len += op[i].getlen(r, op[i].data);
+
+            } else {
+                len += op[i].len;
+            }
+        }
+
+	len += NGX_LINEFEED_SIZE;
+#if defined nginx_version && nginx_version >= 7003
+        line = ngx_pnalloc(r->pool, len);
+#else
+        line = ngx_palloc(r->pool, len);
+#endif
+        if (line == NULL) {
+            return NGX_ERROR;
+        }
+
+	p = line;
+        for (i = 0; i < log[l].format->ops->nelts; i++) {
+            p = op[i].run(r, p, &op[i]);
+        }
+	ngx_linefeed(p);
+
+        ngx_http_udplogger_send(log[l].endpoint, line, p - line);
+    }
+
+    return NGX_OK;
+}
+
+static ngx_int_t ngx_udplog_init_endpoint(ngx_conf_t *cf, ngx_udp_endpoint_t *endpoint) {
+    ngx_pool_cleanup_t    *cln;
+    ngx_udp_connection_t  *uc;
+
+    cln = ngx_pool_cleanup_add(cf->pool, 0);
+    if(cln == NULL) {
+        return NGX_ERROR;
+    }
+
+    cln->handler = ngx_udplogger_cleanup;
+    cln->data = endpoint;
+
+    uc = ngx_calloc(sizeof(ngx_udp_connection_t), cf->log);
+    if (uc == NULL) {
+        return NGX_ERROR;
+    }
+
+    endpoint->udp_connection = uc;
+
+    uc->sockaddr = endpoint->peer_addr.sockaddr;
+    uc->socklen = endpoint->peer_addr.socklen;
+    uc->server = endpoint->peer_addr.name;
+#if defined nginx_version && nginx_version >= 7054
+    uc->log = &cf->cycle->new_log;
+#else
+    uc->log = cf->cycle->new_log;
+#endif
+
+    return NGX_OK;
+}
+
+static void
+ngx_udplogger_cleanup(void *data)
+{
+    ngx_udp_endpoint_t  *e = data;
+
+    ngx_log_debug0(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0,
+                   "cleanup udplogger");
+
+    if(e->udp_connection) {
+        if(e->udp_connection->connection) {
+            ngx_close_connection(e->udp_connection->connection);
+        }
+
+        ngx_free(e->udp_connection);
+    }
+}
+
+static void ngx_http_udplogger_dummy_handler(ngx_event_t *ev)
+{
+}
+
+static ngx_int_t
+ngx_http_udplogger_send(ngx_udp_endpoint_t *l, u_char *buf, size_t len)
+{
+    ssize_t                n;
+    ngx_udp_connection_t  *uc;
+
+    uc = l->udp_connection;
+
+    if (uc == NULL) {
+        /* this should *never* happen! */
+        return NGX_ERROR;
+    }
+
+    if (uc->connection == NULL) {
+        if(ngx_udp_connect(uc) != NGX_OK) {
+            return NGX_ERROR;
+        }
+
+        uc->connection->data = l;
+        uc->connection->read->handler = ngx_http_udplogger_dummy_handler;
+        uc->connection->read->resolver = 0;
+    }
+
+    n = ngx_send(uc->connection, buf, len);
+
+    if (n == -1) {
+        return NGX_ERROR;
+    }
+
+    if ((size_t) n != (size_t) len) {
+        ngx_log_error(NGX_LOG_CRIT, uc->log, 0, "send() incomplete");
+        return NGX_ERROR;
+    }
+
+    return NGX_OK;
+}
+
+static void *
+ngx_http_udplog_create_main_conf(ngx_conf_t *cf)
+{
+    ngx_http_udplog_main_conf_t  *conf;
+
+    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_udplog_main_conf_t));
+    if (conf == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    return conf;
+}
+
+static void *
+ngx_http_udplog_create_loc_conf(ngx_conf_t *cf)
+{
+    ngx_http_udplog_conf_t  *conf;
+
+    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_udplog_conf_t));
+    if (conf == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    return conf;
+}
+
+static char *
+ngx_http_udplog_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
+{
+    ngx_http_udplog_conf_t *prev = parent;
+    ngx_http_udplog_conf_t *conf = child;
+
+    ngx_http_udplog_t         *log;
+    ngx_http_log_fmt_t        *fmt;
+    ngx_http_log_main_conf_t  *lmcf;
+
+    if(conf->logs || conf->off) {
+        return NGX_CONF_OK;
+    }
+
+    conf->logs = prev->logs;
+    conf->off = prev->off;
+
+    if(conf->logs || conf->off) {
+        return NGX_CONF_OK;
+    }
+
+    conf->logs = ngx_array_create(cf->pool, 2, sizeof(ngx_http_udplog_t));
+    if(conf->logs == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    log = ngx_array_push(conf->logs);
+    if(log == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_log_module);
+    fmt = lmcf->formats.elts;
+
+    /* the default "combined" format */
+    log->format = &fmt[0];
+    lmcf->combined_used = 1;
+
+    return NGX_CONF_OK;
+}
+
+static ngx_udp_endpoint_t *
+ngx_http_udplog_add_endpoint(ngx_conf_t *cf, ngx_udplog_addr_t *peer_addr)
+{
+    ngx_http_udplog_main_conf_t    *umcf;
+    ngx_udp_endpoint_t             *endpoint;
+    ngx_udp_endpoint_t             **e;
+
+    /* allocate a new endpoint from the pool and initialize it */
+#if defined nginx_version && nginx_version >= 7003
+    endpoint = ngx_pnalloc(cf->pool, sizeof(ngx_udp_endpoint_t));
+#else
+    endpoint = ngx_palloc(cf->pool, sizeof(ngx_udp_endpoint_t));
+#endif
+    if (endpoint == NULL) {
+        return NULL;
+    }
+
+    endpoint->peer_addr = *peer_addr;
+
+    /* save the pointer to this endpoint to an array, so that it can be
+     * enumerated on the endpoint initialization phase.
+     *
+     * Note that we can't use an array directly, since it may be relocated at
+     * any point and hence all pointers to its elements readdressed
+     */
+    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_udplog_module);
+
+    if(umcf->endpoints == NULL) {
+        umcf->endpoints = ngx_array_create(cf->pool, 2, sizeof(ngx_udp_endpoint_t *));
+        if (umcf->endpoints == NULL) {
+            return NULL;
+        }
+    }
+    e = ngx_array_push(umcf->endpoints);
+    if (e == NULL) {
+        return NULL;
+    }
+
+    *e = endpoint;
+
+    return endpoint;
+}
+
+static char *
+ngx_http_udplog_set_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_udplog_conf_t      *ulcf = conf;
+
+    ngx_uint_t                  i;
+    ngx_str_t                   *value, name;
+    ngx_http_udplog_t           *log;
+    ngx_http_log_fmt_t          *fmt;
+    ngx_http_log_main_conf_t    *lmcf;
+    ngx_url_t                   u;
+    u_char                      *host, *last, *port;
+    size_t                      len;
+    ngx_int_t                   n;
+
+    value = cf->args->elts;
+
+    if (ngx_strcmp(value[1].data, "off") == 0) {
+        ulcf->off = 1;
+        return NGX_CONF_OK;
+    }
+
+    if (ulcf->logs == NULL) {
+        ulcf->logs = ngx_array_create(cf->pool, 2, sizeof(ngx_http_udplog_t));
+        if (ulcf->logs == NULL) {
+            return NGX_CONF_ERROR;
+        }
+    }
+
+    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_log_module);
+
+    if(lmcf == NULL) {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                           "udplog module requires log module to be compiled in");
+        return NGX_CONF_ERROR;
+    }
+
+    log = ngx_array_push(ulcf->logs);
+    if (log == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    ngx_memzero(log, sizeof(ngx_http_udplog_t));
+
+    ngx_memzero(&u, sizeof(ngx_url_t));
+
+    host = value[1].data;
+    last = host + value[1].len;
+    port = ngx_strlchr(host, last, ':');
+    u.default_port = (in_port_t) 514;
+    if (port) {
+        port++;
+        len = last - port;
+        if (len == 0) {
+            return NGX_CONF_ERROR;
+        }
+
+        n = ngx_atoi(port, len);
+
+        if (n < 1 || n > 65536) {
+            return NGX_CONF_ERROR;
+        }
+
+        u.port = (in_port_t) n;
+        last = port - 1;
+    } else {
+        u.port = u.default_port;
+    }
+
+    len = last - host;
+
+    if (len == 0) {
+        return NGX_CONF_ERROR;
+    }
+
+    u.host.len = len;
+    u.host.data = host;
+
+    if(ngx_inet_resolve_host(cf->pool, &u) != NGX_OK) {
+        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V: %s", &u.host, u.err);
+        return NGX_CONF_ERROR;
+    }
+
+    log->endpoint = ngx_http_udplog_add_endpoint(cf, &u.addrs[0]);
+
+    if (log->endpoint == NULL) {
+        return NGX_CONF_ERROR;
+    }
+
+    if (cf->args->nelts >= 3) {
+        name = value[2];
+
+        if (ngx_strcmp(name.data, "combined") == 0) {
+            lmcf->combined_used = 1;
+        }
+    } else {
+        name.len = sizeof("combined") - 1;
+        name.data = (u_char *) "combined";
+        lmcf->combined_used = 1;
+    }
+
+    fmt = lmcf->formats.elts;
+    for (i = 0; i < lmcf->formats.nelts; i++) {
+        if (fmt[i].name.len == name.len
+            && ngx_strcasecmp(fmt[i].name.data, name.data) == 0)
+        {
+            log->format = &fmt[i];
+            return NGX_CONF_OK;
+        }
+    }
+
+    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
+                       "unknown log format \"%V\"", &name);
+    return NGX_CONF_ERROR;
+
+}
+
+static ngx_int_t
+ngx_http_udplog_module_init(ngx_cycle_t *cycle)
+{
+    size_t               cl;
+    ngx_shm_t            shm;
+
+    /* initialize a shared memory segment to store the log sequence number.
+     * multiple threads and multiple worker processes will write to that, 
+     * so make sure to use atomic operations, nicely wrapped around by nginx.
+     * 
+     * (most of this code is copied/adapted from event's module init)
+     */
+
+    /* cl should be equal or bigger than cache line size */
+    cl = 128;
+
+    shm.size = cl;
+    shm.name.len = sizeof("nginx_udplog_shared_zone");
+    shm.name.data = (u_char *) "nginx_udplog_shared_zone";
+    shm.log = cycle->log;
+
+    if (ngx_shm_alloc(&shm) != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    ngx_udplog_sequence_number = (ngx_atomic_t *) shm.addr; 
+    (void) ngx_atomic_cmp_set(ngx_udplog_sequence_number, 0, 1);
+
+    return NGX_OK;
+}
+
+static ngx_int_t
+ngx_http_udplog_init(ngx_conf_t *cf)
+{
+    ngx_int_t                     rc;
+    ngx_uint_t                    i;
+    ngx_http_core_main_conf_t    *cmcf;
+    ngx_http_udplog_main_conf_t  *umcf;
+    ngx_http_handler_pt          *h;
+    ngx_udp_endpoint_t           **e;
+
+    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_udplog_module);
+
+    if(umcf->endpoints != NULL) {
+        e = umcf->endpoints->elts;
+        for(i = 0;i < umcf->endpoints->nelts;i++) {
+            rc = ngx_udplog_init_endpoint(cf, e[i]);
+
+            if(rc != NGX_OK) {
+                return NGX_ERROR;
+            }
+        }
+
+        cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
+
+        h = ngx_array_push(&cmcf->phases[NGX_HTTP_LOG_PHASE].handlers);
+        if (h == NULL) {
+            return NGX_ERROR;
+        }
+
+        *h = ngx_http_udplog_handler;
+    }
+
+    return NGX_OK;
+}
--- /dev/null
+++ b/modules/nginx-udplog/test_client.py
@@ -0,0 +1,64 @@
+##
+# See the README for usage
+##
+
+import argparse
+import urllib2
+import random
+import time
+
+USER_AGENTS = (
+    'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6',
+    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)',
+    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)',
+    'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)',
+    'Mozilla/4.0 (compatible; MSIE 5.0; Windows NT 5.1; .NET CLR 1.1.4322)',
+    'Opera/9.20 (Windows NT 6.0; U; en)',
+    'Opera/9.00 (Windows NT 5.1; U; en)',
+    'Mozilla/4.0 (compatible; MSIE 6.0; MSIE 5.5; Windows NT 5.1) Opera 7.02 [en]',
+    'Googlebot-Image/1.0 ( http://www.googlebot.com/bot.html)',
+    'msnbot-Products/1.0 (+http://search.msn.com/msnbot.htm)',
+
+    # really long user agent
+    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)'*10,
+)
+
+def rand_ustring(n):
+    "Create n-char string of unicode"
+    return u"".join(unichr(random.randint(0x66d, 0x1000)) for i in xrange(n))
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser()
+    parser.add_argument("url", 
+                        type=str, 
+                        help="URL of the nginx web server to send requests to")
+    parser.add_argument("-n",
+                        type=int,
+                        help="Number of random user agent strings to send (default=10)",
+                        default=10)
+    parser.add_argument("-w",
+                        type=float,
+                        help="Seconds to wait between requests (default=0.25)",
+                        default=0.25)
+    parser.add_argument("-l",
+                        type=int,
+                        help="Length of garbage user agent strings (default=50)",
+                        default=50)
+    args = parser.parse_args()
+
+    # Send good user agents
+    for user_agent in USER_AGENTS:
+        req = urllib2.Request(args.url, headers={
+            "User-Agent": user_agent 
+        })
+        urllib2.urlopen(req)
+        time.sleep(args.w)
+
+    # Send random unicode user agents
+    for i in xrange(args.n):
+        garbage = rand_ustring(args.l)
+        req = urllib2.Request(args.url, headers={
+            "User-Agent": garbage.encode('utf-8')
+        })
+        urllib2.urlopen(req)
+        time.sleep(args.w)
